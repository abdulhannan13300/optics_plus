# class ShopCustomerViewSet(viewsets.ModelViewSet):
#     serializer_class = ShopCustomerSerializer

#     def get_queryset(self):
#         # Automatically filter customers by the current shop (tenant)
#         return ShopCustomer.objects.all()  # No need to filter by shop; it's done automatically

#     def list(self, request, *args, **kwargs):
#         customers = self.get_queryset()
#         serializer = self.get_serializer(customers, many=True)
#         return Response(serializer.data)

#     def create(self, request, *args, **kwargs):
#         # Ensure the user is authenticated
#         if not request.user.is_authenticated:
#             return Response({"error": "You must be logged in to create a customer."}, status=status.HTTP_403_FORBIDDEN)

#         # Automatically associate the customer with the current shop
#         request.data['shop'] = request.shop.id  # This should be set by the middleware
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_create(serializer)
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     def retrieve(self, request, pk=None, *args, **kwargs):
#         customer = self.get_object()
#         serializer = self.get_serializer(customer)
#         return Response(serializer.data)

#     def update(self, request, pk=None, *args, **kwargs):
#         customer = self.get_object()
#         serializer = self.get_serializer(customer, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_update(serializer)
#         return Response(serializer.data)

#     def destroy(self, request, pk=None, *args, **kwargs):
#         customer = self.get_object()
#         self.perform_destroy(customer)
#         return Response(status=status.HTTP_204_NO_CONTENT)
    
# class CustomerPrescriptionViewSet(TenantModelViewSet):
#     queryset = CustomerPrescription.objects.all()
#     serializer_class = CustomerPrescriptionSerializer
#     # permission_classes = [permissions.IsAuthenticated]

#     def list(self, request, customer_id, *args, **kwargs):
#         prescriptions = self.get_queryset().filter(customer_id=customer_id)
#         serializer = self.get_serializer(prescriptions, many=True)
#         return Response(serializer.data)

#     def create(self, request, customer_id, *args, **kwargs):
#         request.data['customer'] = customer_id  # Associate prescription with the customer
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_create(serializer)
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     def retrieve(self, request, customer_id, pk=None, *args, **kwargs):
#         prescription = self.get_queryset().filter(customer_id=customer_id, pk=pk).first()
#         if not prescription:
#             raise Http404
#         serializer = self.get_serializer(prescription)
#         return Response(serializer.data)

#     def update(self, request, customer_id, pk=None, *args, **kwargs):
#         prescription = self.get_queryset().filter(customer_id=customer_id, pk=pk).first()
#         if not prescription:
#             raise Http404
#         serializer = self.get_serializer(prescription, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_update(serializer)
#         return Response(serializer.data)

#     def destroy(self, request, customer_id, pk=None, *args, **kwargs):
#         prescription = self.get_queryset().filter(customer_id=customer_id, pk=pk).first()
#         if not prescription:
#             raise Http404
#         self.perform_destroy(prescription)
#         return Response(status=status.HTTP_204_NO_CONTENT)

# class OrderDetailsViewSet(TenantModelViewSet):
#     queryset = OrderDetails.objects.all()
#     serializer_class = OrderDetailsSerializer
#     # permission_classes = [permissions.IsAuthenticated]

#     def list(self, request, customer_id, *args, **kwargs):
#         orders = self.get_queryset().filter(customer_id=customer_id)
#         serializer = self.get_serializer(orders, many=True)
#         return Response(serializer.data)

#     def create(self, request, customer_id, *args, **kwargs):
#         request.data['customer'] = customer_id  # Associate order detail with the customer
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_create(serializer)
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     def retrieve(self, request, customer_id, pk=None, *args, **kwargs):
#         order_detail = self.get_queryset().filter(customer_id=customer_id, pk=pk).first()
#         if not order_detail:
#             raise Http404
#         serializer = self.get_serializer(order_detail)
#         return Response(serializer.data)

#     def update(self, request, customer_id, pk=None, *args, **kwargs):
#         order_detail = self.get_queryset().filter(customer_id=customer_id, pk=pk).first()
#         if not order_detail:
#             raise Http404
#         serializer = self.get_serializer(order_detail, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_update(serializer)
#         return Response(serializer.data)

#     def destroy(self, request, customer_id, pk=None, *args, **kwargs):
#         order_detail = self.get_queryset().filter(customer_id=customer_id, pk=pk).first()
#         if not order_detail:
#             raise Http404
#         self.perform_destroy(order_detail)
#         return Response(status=status.HTTP_204_NO_CONTENT)