# class CustomerPrescriptionViewSet(TenantModelViewSet):
#     queryset = CustomerPrescription.objects.all()
#     serializer_class = CustomerPrescriptionSerializer
#     # permission_classes = [permissions.IsAuthenticated]

#     def list(self, request, customer_id, *args, **kwargs):
#         prescriptions = self.get_queryset().filter(customer_id=customer_id)
#         serializer = self.get_serializer(prescriptions, many=True)
#         return Response(serializer.data)

#     def create(self, request, customer_id, *args, **kwargs):
#         request.data['customer'] = customer_id  # Associate prescription with the customer
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_create(serializer)
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     def retrieve(self, request, pk=None, customer_id=None, *args, **kwargs):
#         try:
#             prescription = self.get_object()
#         except CustomerPrescription.DoesNotExist:
#             raise Http404
#         serializer = self.get_serializer(prescription)
#         return Response(serializer.data)

#     def update(self, request, pk=None, customer_id=None, *args, **kwargs):
#         prescription = self.get_object()
#         serializer = self.get_serializer(prescription, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_update(serializer)
#         return Response(serializer.data)

#     def destroy(self, request, pk=None, customer_id=None, *args, **kwargs):
#         prescription = self.get_object()
#         self.perform_destroy(prescription)
#         return Response(status=status.HTTP_204_NO_CONTENT)
    
# class OrderDetailsViewSet(TenantModelViewSet):
#     queryset = OrderDetails.objects.all()
#     serializer_class = OrderDetailsSerializer
#     # permission_classes = [permissions.IsAuthenticated]

#     def list(self, request, customer_id, *args, **kwargs):
#         orders = self.get_queryset().filter(customer_id=customer_id)
#         serializer = self.get_serializer(orders, many=True)
#         return Response(serializer.data)

#     def create(self, request, customer_id, *args, **kwargs):
#         request.data['customer'] = customer_id  # Associate order detail with the customer
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_create(serializer)
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     def retrieve(self, request, pk=None, customer_id=None, *args, **kwargs):
#         try:
#             order_detail = self.get_object()
#         except OrderDetails.DoesNotExist:
#             raise Http404
#         serializer = self.get_serializer(order_detail)
#         return Response(serializer.data)

#     def update(self, request, pk=None, customer_id=None, *args, **kwargs):
#         order_detail = self.get_object()
#         serializer = self.get_serializer(order_detail, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_update(serializer)
#         return Response(serializer.data)

#     def destroy(self, request, pk=None, customer_id=None, *args, **kwargs):
#         order_detail = self.get_object()
#         self.perform_destroy(order_detail)
#         return Response(status=status.HTTP_204_NO_CONTENT)

# class ShopCustomerViewSet(TenantModelViewSet):
#     queryset = ShopCustomer.objects.all()
#     serializer_class = ShopCustomerSerializer
#     # permission_classes = [permissions.IsAuthenticated]

#     def list(self, request, *args, **kwargs):
#         customers = self.get_queryset()
#         serializer = self.get_serializer(customers, many=True)
#         return Response(serializer.data)

#     def create(self, request, *args, **kwargs):
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_create(serializer)
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     def retrieve(self, request, pk=None, *args, **kwargs):
#         try:
#             customer = self.get_object()
#         except ShopCustomer.DoesNotExist:
#             raise Http404
#         serializer = self.get_serializer(customer)
#         return Response(serializer.data)

#     def update(self, request, pk=None, *args, **kwargs):
#         customer = self.get_object()
#         serializer = self.get_serializer(customer, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         self.perform_update(serializer)
#         return Response(serializer.data)

#     def destroy(self, request, pk=None, *args, **kwargs):
#         customer = self.get_object()
#         self.perform_destroy(customer)
#         return Response(status=status.HTTP_204_NO_CONTENT)

class MultitenantMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Check if the user is authenticated
        if request.user and not request.user.is_anonymous:
            # Attempt to get the first shop associated with the user
            shop = request.user.shop_admin.first()  # Use the correct related_name
            if shop:
                set_current_tenant(shop)  # Set the current tenant (shop)
                request.shop = shop  # Attach the shop to the request for easy access
            else:
                logout(request)  # Log out if no shop is found

        response = self.get_response(request)
        unset_current_tenant()  # Ensure to unset the tenant after the response is processed
        return response